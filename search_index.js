var documenterSearchIndex = {"docs":
[{"location":"connection/#Connection","page":"Connection","title":"Connection","text":"","category":"section"},{"location":"connection/","page":"Connection","title":"Connection","text":"The connection to the SAOImage DS9 is performed using the XPA interface. By default, all routines connect to the first DS9 window found. Optionally, however, the user can select a different window using ds9select.","category":"page"},{"location":"connection/","page":"Connection","title":"Connection","text":"All further operations will be performed by default over the connected window (i.e., the current access_point).","category":"page"},{"location":"connection/#User-interface","page":"Connection","title":"User interface","text":"","category":"section"},{"location":"connection/#DS9ui.ds9","page":"Connection","title":"DS9ui.ds9","text":"ds9([name]; method=\"local\", path=\"ds9\")\n\nLaunch the DS9 application.\n\nBy default the application will be named using the current PID.\n\nThe method optional keywords is used to set the XPA communication method: \"local\" is the recommended way for local executions.\n\nThis function authomaticall sets the default access point, so that all further requests are forwarded to the newly open DS9 window.\n\n\n\n\n\n","category":"function"},{"location":"connection/#DS9ui.ds9select","page":"Connection","title":"DS9ui.ds9select","text":"ds9select(ident=\"DS9:*\"; method=\"local\"; silent=false, interactive=true)\n\nSelect a DS9 window for further interactions.\n\nIf multiple DS9 windows match the ident, the user can select the correct window using a simple interface; if interactive=false the first matching window is selected.\n\nwarning: Warning\nIf method is not undefined, the environment variable XPA_METHOD is set to the corresponding string. Typically the most reliable connection is local, the default value.\n\n\n\n\n\n","category":"function"},{"location":"connection/#DS9ui.ds9close","page":"Connection","title":"DS9ui.ds9close","text":"ds9close([access_point])\n\nClose the current DS9 session.\n\n\n\n\n\n","category":"function"},{"location":"connection/#Internal-routines-and-variables","page":"Connection","title":"Internal routines and variables","text":"","category":"section"},{"location":"connection/#DS9ui.access_point","page":"Connection","title":"DS9ui.access_point","text":"A string saving the XPA address of the current access point, or \"\" if no connection is established.\n\n\n\n\n\n","category":"constant"},{"location":"connection/#DS9ui.connect","page":"Connection","title":"DS9ui.connect","text":"connect(ident=\"DS9:*\"; method=\"local\")\n\nEstablish a new connection to DS9 using the given ident.\n\nIf method is not undefined, the environment variable XPA_METHOD is set to the corresponding string. Typically the most reliable connection is local, the default value.\n\n\n\n\n\n","category":"function"},{"location":"connection/#DS9ui._current_ap","page":"Connection","title":"DS9ui._current_ap","text":"_current_ap()\n\nThe default access point.\n\nThis function just returns access_point if this variable is set, or establishes a new connection using connect.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/#High-level-interface","page":"Interface","title":"High-level interface","text":"","category":"section"},{"location":"interface/#DS9ui.ds9image","page":"Interface","title":"DS9ui.ds9image","text":"ds9image([access_point,] image; usefile=true, wcs=nothing)\n\nDisplay the image in the current frame of DS9.\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9mask","page":"Interface","title":"DS9ui.ds9mask","text":"ds9mask([access_point,] name::String=\"\"; coords=:image, silent=true, \n        full=false, usefits=false)\n\nReturn a mask of the regions defined in the DS9 window.\n\nThe optional argument name is the name of the group of regions to extract. If name is an empty string, all regions are extracted.\n\nKeyword Arguments\n\nident: the identifier of the DS9 window.\ncoords: the type of coordinates to return: can be :image, :physical, :fk5, :galactic\nsilent: if true, no warning is issued when unknown regions are found.\nfull: if true, the mask is the full image. If false, the mask is cropped to the smallest rectangle containing all regions.\nusefits: if true, the mask is extracted from the FITS file. If false, the mask is extracted from the DS9 window.\n\nThe return value is a tuple (image, mask), where image is the image extracted from the DS9 window (that is, the pixel values), and mask is a boolean OffsetArray with the mask (that is, true inside the regions and false outside).\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9fitprofiles","page":"Interface","title":"DS9ui.ds9fitprofiles","text":"ds9fitprofiles([access_point,] name; modes=[:gaussian],\n               usefits=false, silent=false, max_calls=1_000_000)\n\nFit a region in DS9 with elliptical profiles.\n\nThis function extract a region in DS9 and then fits the data with a superposition of profiles identified by modes. A background value for the sky is always added. Known profiles are :gaussian (the default), :moffat, :lorentzian, :sersic, :exponential, :devaucouleurs, and :king. Note that modes is an array: all given profiles will be combined in the specified order for the final fit.\n\nOther options control the way data are retrieved from DS9 (usefits), the output to print (silent), and the maximum number of calls to the chi-square funtion used for the fit (max_calls).\n\nThe function returns the best-fit parameters (as a vector) and a matrix with the residuals (data - model).\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9pickobj","page":"Interface","title":"DS9ui.ds9pickobj","text":"ds9pickobj([access_point]; ident=\"DS9:*\", mode=:gaussian, r=32, \n           shape=:circle, silent=false, usefits=false)\n\nFits interactively a region in DS9 with an elliptical profile.\n\nThis function allows the selection of a circular or quadratic region in DS9 and fits it with a given profile using ds9fitprofiles.\n\n\n\n\n\n","category":"function"},{"location":"interface/#Low-level-interface","page":"Interface","title":"Low-level interface","text":"","category":"section"},{"location":"interface/#DS9ui.ds9get","page":"Interface","title":"DS9ui.ds9get","text":"r = ds9get([type [, dims],] [access_point,] command; kw...)\n\nReturns the output of an XPA get command sent to DS9.\n\nFor complex outputs, one can use the type and optionally the dims parameters, which are directly passed to XPA.get.\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9set","page":"Interface","title":"DS9ui.ds9set","text":"ds9set([access_point], \"command\"; kw...)\nds9set([access_point], (; key1=val1, key2=val2...))\n\nTransmits one or more commands to DS9 using the XPA interface.\n\nIn the first form, the command is entered as a single string and is transmitted unchanged to DS9. Alternatively, one can pass a NamedTuple with a series of keys and values. Each keywords result in a single command sent to DS9. The value of the keyword is directly used without any interpolation. The only exception is that a Boolean value is converted into \"yes\"/\"no\" (following DS9 notation).\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9cursor","page":"Interface","title":"DS9ui.ds9cursor","text":"ds9cursor([access_point]; coords=:image, event=:button)\n\nReturn the coordinates of the cursor in the DS9 window.\n\nident: the identifier of the DS9 window.\ncoords: the type of coordinates to returnL can be :image, :physical, :fk5, :galactic\nevent: the type of event to capture the cursor position. Can be :button, :key, :any\n\nThe function returns a tuple (key, coords), where key is a string representing the event and coords is an array of coordinates as float numbers.\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9wcs","page":"Interface","title":"DS9ui.ds9wcs","text":"ds9wcs([access_point]; useheader=true)\n\nReturn the WCS transformation of the current image in the DS9 window.\n\nKeyword Arguments\n\nident: the identifier of the DS9 window.\nuseheader: if true, the WCS is extracted from the FITS header. If false, the WCS is extracted from the DS9 window.\n\n\n\n\n\n","category":"function"},{"location":"interface/#DS9ui.ds9getregions","page":"Interface","title":"DS9ui.ds9getregions","text":"ds9getregions([access_point,] name=\"\"; coords=:image, selected=false)\n\nReturn the regions defined in the DS9 window.\n\nThe optional argument name is the name of the group of regions to extract. If name is an empty string, all regions are extracted.\n\nKeyword Arguments\n\nident: the identifier of the DS9 window.\ncoords: the type of coordinates to returnL can be :image, :physical, :fk5, :galactic\n\nThe return value is an array of tuples (shape, coordinates, properties), where shape is a symbol indicating shape of the region, coordinates is an array of coordinates, and properties is a dictionary with the properties of the region.\n\n\n\n\n\n","category":"function"},{"location":"#DS9ui","page":"Home","title":"DS9ui","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia user-interface for SAOImage DS9.","category":"page"}]
}
